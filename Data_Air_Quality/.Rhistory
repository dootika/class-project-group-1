# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
deaths <- readxl::read_excel("no_deaths_2011.xlsx")
setwd("~/class-project-group-1/Data_Respiratory_illnesses")
deaths <- readxl::read_excel("no_deaths_2011.xlsx")
deaths
deaths <- as.data.frame(deaths)
deaths
deaths <- deaths[2:]
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
ARI_death
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[2:]
ARI_death <- ARI_death[2:,}
ARI_death <- ARI_death[2:,]
ARI_death <- ARI_death[1,1]
ARI_death <- as.data.frame(ARI_death)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[1,1]
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[1,]
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
ARI_death[1,]
ARI_death <- as.data.frame(ARI_death)
ARI_death[1,]
ARI_death[-1,]
ARI_death <- ARI_death[-1,]
names(ARI_death)[3] <- "Male Deaths"
names(ARI_death)[2] <- "Male Cases"
ARI)death
ARI_death
names(ARI_death)[5] <- "Female Deaths"
names(ARI_death)[6] <- "Total Cases"
names(ARI_death)[7] <- "Total Deaths"
ARI_death
ARI_death <- ARI_death[,-8]
ARI_death
write.csv(ARI_death , file = "Deaths_2011.csv")
setwd("~/class-project-group-1/Data_Respiratory_illnesses")
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
table(air_quality$Type)
air_qual <- as_tibble(air_quality)
air_qual$PM10_Annual_Average_g_m3 = as.numeric(air_qual$PM10_Annual_Average_g_m3)
air_qualf <- air_qual %>% group_by(State) %>% summarise(SO2_Annual_Average_g_m3 = mean(SO2_Annual_Average_g_m3) ,
NO2_Annual_Average_g_m3 = mean(NO2_Annual_Average_g_m3),
PM10_Annual_Average_g_m3 = mean(PM10_Annual_Average_g_m3 , na.rm = TRUE))
write.csv(air_qualf , file = "statewise_pollution.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_2012[child_2012$State %in% air_qualf$State ,]
setwd("~/class-project-group-1")
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
table(air_quality$Type)
air_qual <- as_tibble(air_quality)
air_qual$PM10_Annual_Average_g_m3 = as.numeric(air_qual$PM10_Annual_Average_g_m3)
air_qualf <- air_qual %>% group_by(State) %>% summarise(SO2_Annual_Average_g_m3 = mean(SO2_Annual_Average_g_m3) ,
NO2_Annual_Average_g_m3 = mean(NO2_Annual_Average_g_m3),
PM10_Annual_Average_g_m3 = mean(PM10_Annual_Average_g_m3 , na.rm = TRUE))
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_2012[child_2012$State %in% air_qualf$State ,]
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
child_78[child_78$State %in% child_78$State ,]
#comparisons
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011")
#comparisons
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011.csv")
temp <- as.data.frame(air_qualf)
comp <- merge (temp , child_2012)
comp2 <- merge(temp , )
comp2 <- merge(temp , Deaths_2011)
comp2
summary(comp2)
summary(comp)
temp
child_2012
summary(Deaths_2011)
ARI_death
names(ARI_death)[1] <- "State"
setwd("~/class-project-group-1/Data_Respiratory_illnesses")
write.csv(ARI_death , file = "Deaths_2011.csv")
setwd("~/class-project-group-1")
comp2 <- merge(temp , Deaths_2011)
comp2
temp
Deaths_2011
ARI_death
#comparisons
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011.csv")
Deaths_2011
comp2 <- merge(temp , Deaths_2011)
comp2
write.csv(comp2 , "quality_vs_deaths2.csv")
setwd("~/class-project-group-1/Data_Air_Quality")
write.csv(comp2 , "quality_vs_deaths2.csv")
setwd("~/class-project-group-1")
quality_vs_deaths2 <- read.csv("./Data_Air_Quality/quality_vs_deaths2.csv")
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_deaths","quality_vs_deaths2")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_deaths <- read.csv("./Data_Air_Quality/quality_vs_deaths.csv")
quality_vs_deaths2 <- read.csv("./Data_Air_Quality/quality_vs_deaths2.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_deaths" = quality_vs_deaths,
"quality_vs_deaths2" = quality_vs_deaths2)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_deaths","quality_vs_deaths2")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_deaths <- read.csv("./Data_Air_Quality/quality_vs_deaths.csv")
quality_vs_deaths2 <- read.csv("./Data_Air_Quality/quality_vs_deaths2.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_deaths" = quality_vs_deaths,
"quality_vs_deaths2" = quality_vs_deaths2)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_deaths","quality_vs_deaths2")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_deaths <- read.csv("./Data_Air_Quality/quality_vs_deaths.csv")
quality_vs_deaths2 <- read.csv("./Data_Air_Quality/quality_vs_deaths2.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_deaths" = quality_vs_deaths,
"quality_vs_deaths2" = quality_vs_deaths2)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
cor(comp2$NO2_Annual_Average_g_m3 , comp2$Total.Cases)
cor(comp2$SO2_Annual_Average_g_m3, comp2)
cor(comp2$SO2_Annual_Average_g_m3, comp2$Total.Cases)
cor(comp2$PM10_Annual_Average_g_m3 , comp2$Total.Cases)
cor(comp2$SO2_Annual_Average_g_m3, comp2$NO2_Annual_Average_g_m3)
cor(comp2$SO2_Annual_Average_g_m3, comp2$PM10_Annual_Average_g_m3)
cor(comp$SO2_Annual_Average_g_m3, comp$Total_Children_Acute_Respiratory_Infection)
cor(comp2$PM10_Annual_Average_g_m3, comp2$Female.Deaths)
cor(comp2$NO2_Annual_Average_g_m3, comp2$Total.Cases)
cor(comp2$NO2_Annual_Average_g_m3 , comp2$PM10_Annual_Average_g_m3)
cor(comp2$NO2_Annual_Average_g_m3 , comp2$Total.Deaths)
cor(comp2$State , comp2$Total.Deaths/comp2$Total.Cases)
cor(comp2$PM10_Annual_Average_g_m3 , comp2$Total.Cases)
cor(comp2$PM10_Annual_Average_g_m3 , comp2$Total.Deaths)
cor(comp2$SO2_Annual_Average_g_m3, comp2$Total.Cases)
cor(comp2$SO2_Annual_Average_g_m3, comp2$Total.Deaths)
comp <- merge(comp , Deaths_2011)
setwd("~/class-project-group-1/Data_Air_Quality")
write.csv(comp, file = "quality_vs_deaths.csv")
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_deaths","quality_vs_deaths2")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_deaths <- read.csv("./Data_Air_Quality/quality_vs_deaths.csv")
quality_vs_deaths2 <- read.csv("./Data_Air_Quality/quality_vs_deaths2.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_deaths" = quality_vs_deaths,
"quality_vs_deaths2" = quality_vs_deaths2)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_deaths","quality_vs_deaths2")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_deaths <- read.csv("./Data_Air_Quality/quality_vs_deaths.csv")
quality_vs_deaths2 <- read.csv("./Data_Air_Quality/quality_vs_deaths2.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_deaths" = quality_vs_deaths,
"quality_vs_deaths2" = quality_vs_deaths2)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
