summer %>% rename(x1 = Games)
summer <- summer[3:62,]
summer
summer %>% select(X1, X2, X3,X4,X5,X6,X7,X8)
summer %>% rename(X1 = Games)
summer %>% rename(X1 , Games)
summer %>% rename(X1 = Games)
summer %>% rename(X1 )
summer %>% rename(X1)
summer %>% rename(X1 = X)
summer %>% rename(X1 = Game)
summer %>% rename(Games = X1)
summer <- summer[3:62,]
libary (rvest)
library (dplyr)
html <- read_html("https://en.wikipedia.org/wiki/United_States_at_the_Olympics")
table <- html_table(html)
summer <- table[[4]]
summer <- summer[3:62,]
summer %>% select(X1, X2, X3,X4,X5,X6,X7,X8)
summer %>% rename(Games = X1 , Athletes = X2 ,	Gold = X3 ,	Silver = X4 , 	Bronze = X5 ,
Total = X6,
Gold medals = X7 , X8 =	Total medals)
summer %>% rename(Games = X1 , Athletes = X2 ,	Gold = X3 ,	Silver = X4 , 	Bronze = X5 ,
Total = X6,	Gold medals = X7 , X8 =	Total medals)
summer %>% rename(Games = X1 , Athletes = X2 )
summer %>% rename(Games = X1 , Athletes = X2,,	Gold = X3 )
summer %>% rename(Games = X1 , Athletes = X2,	Gold = X3 ,	Silver = X4 , 	Bronze = X5 ,
Total = X6,	Gold medals = X7 , X8 =	Total medals)
summer %>% rename(Games = X1 , Athletes = X2,	Gold = X3 ,	Silver = X4 , Bronze = X5 , Total = X6,	Gold medals = X7 , X8 =	Total medals)
summer %>% rename(Games = X1 , Athletes = X2,	Gold = X3 ,	Silver = X4 , Bronze = X5 , Total = X6,	Gold medals = X7 , Total Medals = X8)
summer %>% rename(Games = X1 , Athletes = X2,	Gold = X3 ,	Silver = X4 , Bronze = X5 , Total = X6,	Gold.medals = X7 , Total.Medals = X8)
summer <- table[[4]]
summer <- summer[3:62,]
summer <- summer %>% select(X1, X2, X3,X4,X5,X6,X7,X8)
summer %>% rename(Games = X1 , Athletes = X2,	Gold = X3 ,	Silver = X4 , Bronze = X5 , Total = X6,	Gold.medals = X7 , Total.Medals = X8)
summer [60]
summer[1]
summer[1,]
summer[60,]
summer %>% filter(X1 = 2032 Brisbane)
summer %>% filter(X1 = "2032 Brisbane")
summer %>% filter(X1 == "2032 Brisbane")
summer[ 30, ]
summer[ 32, ]
summer <- summer[ 32, ]
summer
questions <- html %>% html_elements(".s-post-summary--content-title")
questions <- html %>% html_elements(".s-post-summary--content-title")
questions <- html %>% html_elements(".s-post-summary--content")
html <- read_html("https://stats.stackexchange.com/questions?tab=Votes")
questions <- html %>% html_elements(".s-post-summary--content")
questions <- html %>% html_elements(".s-post-summary--content")%>% html_text()
questions <- html %>% html_elements(".s-post-summary--content-title")%>% html_text()
html <- read_html("https://stats.stackexchange.com/questions?tab=Votes")
questions <- html %>% html_elements(".s-post-summary--content-title")%>% html_text()
html <- read_html("https://stats.stackexchange.com/questions?tab=Votes")
questions <- html %>% html_elements(".s-post-summary--content-title a")%>% html_text()
questions
views <- html %>% html_elements(".s-post-summary--stats-item-number")%>% html_text()
views
foo <- html %>% html_elements(".s-post-summary--stats-item-number")%>% html_text()
views <- foo[sequence(foo , by = 3)]
views <- foo[sequence(1:45 , by = 3)]
views
views <- foo[seq(1:45 , by = 3)]
?seq
views <- foo[seq(1,45 , by = 3)]
views
votes <- foo[seq(1,45 , by = 3)]
answers <- foo[seq(2,45,by = 3)]
views <- foo[seq(3 , 45 , by = 3)]
table <- data.frame(questions, votes, answers, views)
table
spatialLIBD::run_app()
spatialLIBD::run_app()
spe <- spatialLIBD::fetch_data(type = 'spe')
gc()
greetings <- function(name)
{
text <- paste("Hello", name)
return(text)
}
greetings(Dootika)
greetings("Dootika")
?which
?apply
?sapply
?mfrow
?par
rep?
rep
?rep
?char
?char
?char()
?character()
?rep
?save.image
?load_image
library(imager)
?n()
?n
library("DR.SC")
data("dlpfc151510", package = 'DR.SC')
data <- data("dlpfc151510", package = 'DR.SC')
data
?object.type
class.forname
Class.forName()
?Class
?class
assign(data)
?assign
?as.name()
as.name(data)
object.size(as.name(data))
count <- as.name(data)@assays$RNA@counts
dlpfc151510
data <-get(data("dlpfc151510", package = 'DR.SC'))
browsevignetted("DR.SC")
browseVignettes("DR.SC")
marks <- c(0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 21, 21, 22, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 28, 28, 29, 30, 30, 31, 31, 31, 31, 32, 33, 34, 40)
var <- var(marks)
sqrt(var)
18/40 * 100
browseVignettes(BayesSpace)
browseVignettes("BayesSpace")
?unique
?unique
?count
?unique
?n_distinct
?nrow
?unique()
dlpfc
i <- as.character(151507)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", i)
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
i <- as.character(151507)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", i)
set.seed(101)
dec <- scran::modelGeneVar(dlpfc)
top <- scran::getTopHVGs(dec, n = 2000)
set.seed(102)
dlpfc <- scater::runPCA(dlpfc, subset_row=top)
## Add BayesSpace metadata
dlpfc <- spatialPreprocess(dlpfc, platform="Visium", skip.PCA=TRUE)
dlpfc['cluster']
dlpfc
colData(dlpfc)
count(unique(colData(dlpfc)['Cluster']))
coldata[dlpfc]
colData(dlpfc)
colData(dlpfc)['Cluster']
count(colData(dlpfc)['Cluster'])
unique(colData(dlpfc)['Cluster'])
as.vector(colData(dlpfc['Cluster']))
nrow(unique(colData(dlpfc)['Cluster']))
library("DR.SC")
library(SingleCellExperiment)
library(Seurat)
library(scater)
i <- as.character(i)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", i)
manno <- runPCA(dlpfc)
dlpfc.seurat <- as.Seurat(manno, counts = "counts", data = "logcounts")
dlpfc <- NormalizeData(dlpfc.seurat, verbose = F)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc, nfeatures = 500, verbose = F)
library("DR.SC")
library(SingleCellExperiment)
library(Seurat)
library(scater)
i <- as.character(151507)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", i)
manno <- runPCA(dlpfc)
dlpfc.seurat <- as.Seurat(manno, counts = "counts", data = "logcounts")
dlpfc <- NormalizeData(dlpfc.seurat, verbose = F)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc, nfeatures = 500, verbose = F)
dlpfc
manno
dlpfc.seurat
colData(dlpfc.seurat)
colData(manno)
library("DR.SC")
library(SingleCellExperiment)
install.packages("SingleCellExperiment")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
warnings()
library(Banksy)
library(gridExtra)
library(ggplot2)
library(SingleCellExperiment)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", 151673)
library(Banksy)
library(gridExtra)
library(ggplot2)
library(SingleCellExperiment)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", 151673)
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", 151673)
dlpfc
bank <- asBanksyObject(sce, expr.assay = 'counts',
coord.colnames = c('sdimx', 'sdimy'))
bank <- asBanksyObject(dlpfc, expr.assay = 'counts',
coord.colnames = c('sdimx', 'sdimy'))
library(dplyr)
library(rvest)
html <- read_html("https://www.worldwildlife.org/species/directory?direction=desc&sort=extinction_status")
animals <- html %>% html_elements(".keep")
animals <- html %>% html_elements(".keep") %>% html_text()
animals
animals <- html_table(html)
animals
animals <- animals[[1]]
animals
animals[50]
animals[:50]
animals
animals[50,]
animals2 <- html_table(html2)
html2 <- read_html("https://www.worldwildlife.org/species/directory?direction=desc&page=2&sort=extinction_status")
animals2 <- html_table(html2)
animals2 <- animals2[[1]]
animals2
new <- animals + animals2
an <- as.data.frame(animals)
an2 <- as.data.frame(animals2)
new <- animals + animals2
new <- an + an2
new <- merge(animals,animals2)
new
new <- bind_rows(animals,animals2)
new
html3 <- read_html("https://awionline.org/content/list-endangered-species")
animals3 <- html_table(html3)
html3
animals3
library("DR.SC")
library(SingleCellExperiment)
library(BayesSpace)
library(Seurat)
library(scater)
i <- as.character(151507)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", i)
manno <- runPCA(dlpfc)
dlpfc.seurat <- as.Seurat(manno, counts = "counts", data = "logcounts")
dlpfc <- NormalizeData(dlpfc.seurat, verbose = F)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc, nfeatures = 500, verbose = F)
q <- nrow(unique(colData(manno)['Cluster']))
seu <- DR.SC(seu, K= q, platform = 'Visium', verbose=F)
filename = paste(i,".csv",sep = "")
write.csv(seu@meta.data, file = filename)
filename2 = paste(i , ".jpeg" , sep = "")
jpeg(filename = filename2)
spatialPlotClusters(seu)
dev.off()
jpeg(filename = filename2)
spatialPlotClusters(seu)
dev.off()
dev.new()
jpeg(filename = filename2)
spatialPlotClusters(seu)
dev.off()
?dev.new()
jpeg(filename = filename2)
spatialPlotClusters(seu)
dev.off()
jpeg(filename = filename2)
spatialPlotClusters(seu)
dev.off()
jpeg(filename = filename2)
spatialPlotClusters(seu)
dev.off()
jpeg(filename = "Test2.jpeg")
spatialPlotClusters(seu)
dev.off()
setwd("~/class-project-group-1")
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
ARI_deatah
ARI_death
world_AQI
World_AQI
# Load the required library
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/33a89527-b545-4389-8738-8d7736aca508?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=100000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
# Initialize empty vectors for each column
state <- character()
city <- character()
type <- character()
category_of_es <- character()
so2_annual_average_g_m3 <- character()
air_quality_of_so2 <- character()
no2_annual_average_g_m3 <- character()
air_quality_of_no2 <- character()
pm10_annual_average_g_m3 <- character()
air_quality_of_pm10 <- character()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
state <- c(state, xmlValue(xmlChildren(item)$state_))
city <- c(city, xmlValue(xmlChildren(item)$city))
type <- c(type, xmlValue(xmlChildren(item)$type))
category_of_es <- c(category_of_es, xmlValue(xmlChildren(item)$category_of_es))
so2_annual_average_g_m3 <- c(so2_annual_average_g_m3, xmlValue(xmlChildren(item)$so2_annual_average_g_m3_))
air_quality_of_so2 <- c(air_quality_of_so2, xmlValue(xmlChildren(item)$air_quality_of_so2))
no2_annual_average_g_m3 <- c(no2_annual_average_g_m3, xmlValue(xmlChildren(item)$no2_annual_average_g_m3_))
air_quality_of_no2 <- c(air_quality_of_no2, xmlValue(xmlChildren(item)$air_quality_of_no2))
pm10_annual_average_g_m3 <- c(pm10_annual_average_g_m3, xmlValue(xmlChildren(item)$pm10_annual_average_g_m3_))
air_quality_of_pm10 <- c(air_quality_of_pm10, xmlValue(xmlChildren(item)$air_quality_of_pm10))
}
# Create a data frame from the vectors
air_quality <- data.frame(
State = state,
City = city,
Type = type,
Category_of_ES = category_of_es,
SO2_Annual_Average_g_m3 = so2_annual_average_g_m3,
Air_Quality_of_SO2 = air_quality_of_so2,
NO2_Annual_Average_g_m3 = no2_annual_average_g_m3,
Air_Quality_of_NO2 = air_quality_of_no2,
PM10_Annual_Average_g_m3 = pm10_annual_average_g_m3,
Air_Quality_of_PM10 = air_quality_of_pm10
)
air_quality
write.csv(air_quality)
setwd("~/class-project-group-1")
write.csv(air_quality)
?write.csv
write.csv(air_quality , file = "air_quality.csv")
# Load the required library
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/1e23f069-a792-4f2f-8c86-d9885e84f2d0?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=10000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
sl_no <- character()
state <- character()
total_children_suffered_ari <- numeric()
rural_children_suffered_ari <- numeric()
urban_children_suffered_ari <- numeric()
total_children_treated_ari <- numeric()
rural_children_treated_ari <- numeric()
urban_children_treated_ari <- numeric()
total_children_treated_government_health_facility <- numeric()
rural_children_treated_government_health_facility <- numeric()
urban_children_treated_government_health_facility <- numeric()
total_children_treated_private_health_facility <- numeric()
rural_children_treated_private_health_facility <- numeric()
urban_children_treated_private_health_facility <- numeric()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
sl_no <- c(sl_no, xmlValue(xmlChildren(item)$sl_no_))
state <- c(state, xmlValue(xmlChildren(item)$india_states_union_territories))
total_children_suffered_ari <- c(total_children_suffered_ari, as.numeric(xmlValue(xmlChildren(item)$children_suffered_from_ari___total)))
rural_children_suffered_ari <- c(rural_children_suffered_ari, as.numeric(xmlValue(xmlChildren(item)$children_suffered_from_ari___rural)))
urban_children_suffered_ari <- c(urban_children_suffered_ari, as.numeric(xmlValue(xmlChildren(item)$children_suffered_from_ari___urban)))
total_children_treated_ari <- c(total_children_treated_ari, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____total)))
rural_children_treated_ari <- c(rural_children_treated_ari, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____rural)))
urban_children_treated_ari <- c(urban_children_treated_ari, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____urban)))
total_children_treated_government_health_facility <- c(total_children_treated_government_health_facility, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____government_health_facility___total)))
rural_children_treated_government_health_facility <- c(rural_children_treated_government_health_facility, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____government_health_facility___rural)))
urban_children_treated_government_health_facility <- c(urban_children_treated_government_health_facility, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____government_health_facility___urban)))
total_children_treated_private_health_facility <- c(total_children_treated_private_health_facility, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____private_health_facility___total)))
rural_children_treated_private_health_facility <- c(rural_children_treated_private_health_facility, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____private_health_facility___rural)))
urban_children_treated_private_health_facility <- c(urban_children_treated_private_health_facility, as.numeric(xmlValue(xmlChildren(item)$children_under_age_five_for_whom_treatment_was_sought_from_health_facility_with_symptoms_of_acute_respiratory_infection__ari____private_health_facility___urban)))
}
# Create a data frame from the vectors
child_78 <- data.frame(
Sl_No = sl_no,
State = state,
Total_Children_Suffered_ARI = total_children_suffered_ari,
Rural_Children_Suffered_ARI = rural_children_suffered_ari,
Urban_Children_Suffered_ARI = urban_children_suffered_ari,
Total_Children_Treated_ARI = total_children_treated_ari,
Rural_Children_Treated_ARI = rural_children_treated_ari,
Urban_Children_Treated_ARI = urban_children_treated_ari,
Total_Children_Treated_Government_Health_Facility = total_children_treated_government_health_facility,
Rural_Children_Treated_Government_Health_Facility = rural_children_treated_government_health_facility,
Urban_Children_Treated_Government_Health_Facility = urban_children_treated_government_health_facility,
Total_Children_Treated_Private_Health_Facility = total_children_treated_private_health_facility,
Rural_Children_Treated_Private_Health_Facility = rural_children_treated_private_health_facility,
Urban_Children_Treated_Private_Health_Facility = urban_children_treated_private_health_facility
)
child_78
summarise(child_78)
child_78
dim(child_78)
summarise(child_78)
child_78[[1]]
child_78[2]
write.csv(child_78 , file = "children.csv")
# Load the required library
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/ab5ed247-4652-4833-8b1c-c7a4f5284162?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=1000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
sl_no <- character()
state <- character()
total_children_acute_respiratory_infection <- numeric()
rural_children_acute_respiratory_infection <- numeric()
urban_children_acute_respiratory_infection <- numeric()
total_women_aware_danger_signs_ari <- numeric()
rural_women_aware_danger_signs_ari <- numeric()
urban_women_aware_danger_signs_ari <- numeric()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
sl_no <- c(sl_no, xmlValue(xmlChildren(item)$sl_no_))
state <- c(state, xmlValue(xmlChildren(item)$india_states_union_territories))
total_children_acute_respiratory_infection <- c(total_children_acute_respiratory_infection, as.numeric(xmlValue(xmlChildren(item)$children_with_acute_respiratory_infection_or_fever_in_last_2_weeks_and_saught_advice_treatment___total)))
rural_children_acute_respiratory_infection <- c(rural_children_acute_respiratory_infection, as.numeric(xmlValue(xmlChildren(item)$children_with_acute_respiratory_infection_or_fever_in_last_2_weeks_and_saught_advice_treatment___rural)))
urban_children_acute_respiratory_infection <- c(urban_children_acute_respiratory_infection, as.numeric(xmlValue(xmlChildren(item)$children_with_acute_respiratory_infection_or_fever_in_last_2_weeks_and_saught_advice_treatment___urban)))
total_women_aware_danger_signs_ari <- c(total_women_aware_danger_signs_ari, as.numeric(xmlValue(xmlChildren(item)$women_aware_about_danger_signs_of_acute_respiratory_infection___total)))
rural_women_aware_danger_signs_ari <- c(rural_women_aware_danger_signs_ari, as.numeric(xmlValue(xmlChildren(item)$women_aware_about_danger_signs_of_acute_respiratory_infection___rural)))
urban_women_aware_danger_signs_ari <- c(urban_women_aware_danger_signs_ari, as.numeric(xmlValue(xmlChildren(item)$women_aware_about_danger_signs_of_acute_respiratory_infection___urban)))
}
# Create a data frame from the vectors
child_2012 <- data.frame(
Sl_No = sl_no,
State = state,
Total_Children_Acute_Respiratory_Infection = total_children_acute_respiratory_infection,
Rural_Children_Acute_Respiratory_Infection = rural_children_acute_respiratory_infection,
Urban_Children_Acute_Respiratory_Infection = urban_children_acute_respiratory_infection,
Total_Women_Aware_Danger_Signs_ARI = total_women_aware_danger_signs_ari,
Rural_Women_Aware_Danger_Signs_ARI = rural_women_aware_danger_signs_ari,
Urban_Women_Aware_Danger_Signs_ARI = urban_women_aware_danger_signs_ari
)
child_2012
write.csv(child_2012, "child_2012.csv")
# Load the required library
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/ab5ed247-4652-4833-8b1c-c7a4f5284162?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=1000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
sl_no <- character()
state <- character()
total_children_acute_respiratory_infection <- numeric()
rural_children_acute_respiratory_infection <- numeric()
urban_children_acute_respiratory_infection <- numeric()
total_women_aware_danger_signs_ari <- numeric()
rural_women_aware_danger_signs_ari <- numeric()
urban_women_aware_danger_signs_ari <- numeric()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
sl_no <- c(sl_no, xmlValue(xmlChildren(item)$sl_no_))
state <- c(state, xmlValue(xmlChildren(item)$india_states_union_territories))
total_children_acute_respiratory_infection <- c(total_children_acute_respiratory_infection, as.numeric(xmlValue(xmlChildren(item)$children_with_acute_respiratory_infection_or_fever_in_last_2_weeks_and_saught_advice_treatment___total)))
rural_children_acute_respiratory_infection <- c(rural_children_acute_respiratory_infection, as.numeric(xmlValue(xmlChildren(item)$children_with_acute_respiratory_infection_or_fever_in_last_2_weeks_and_saught_advice_treatment___rural)))
urban_children_acute_respiratory_infection <- c(urban_children_acute_respiratory_infection, as.numeric(xmlValue(xmlChildren(item)$children_with_acute_respiratory_infection_or_fever_in_last_2_weeks_and_saught_advice_treatment___urban)))
total_women_aware_danger_signs_ari <- c(total_women_aware_danger_signs_ari, as.numeric(xmlValue(xmlChildren(item)$women_aware_about_danger_signs_of_acute_respiratory_infection___total)))
rural_women_aware_danger_signs_ari <- c(rural_women_aware_danger_signs_ari, as.numeric(xmlValue(xmlChildren(item)$women_aware_about_danger_signs_of_acute_respiratory_infection___rural)))
urban_women_aware_danger_signs_ari <- c(urban_women_aware_danger_signs_ari, as.numeric(xmlValue(xmlChildren(item)$women_aware_about_danger_signs_of_acute_respiratory_infection___urban)))
}
# Create a data frame from the vectors
child_2012 <- data.frame(
Sl_No = sl_no,
State = state,
Total_Children_Acute_Respiratory_Infection = total_children_acute_respiratory_infection,
Rural_Children_Acute_Respiratory_Infection = rural_children_acute_respiratory_infection,
Urban_Children_Acute_Respiratory_Infection = urban_children_acute_respiratory_infection,
Total_Women_Aware_Danger_Signs_ARI = total_women_aware_danger_signs_ari,
Rural_Women_Aware_Danger_Signs_ARI = rural_women_aware_danger_signs_ari,
Urban_Women_Aware_Danger_Signs_ARI = urban_women_aware_danger_signs_ari
)
