Deaths_2011
Deaths_2011["Cases/population"] = Deaths_2011$`Total Cases`/Deaths_2011$populations
Deaths_2011["Total Deaths/Cases"] = Deaths_2011$Total.Deaths/Deaths_2011$Total.Cases
Deaths_2011
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[-1,]
ARI_death <- ARI_death[,-8]
names(ARI_death)[2] <- "Male_Cases"
names(ARI_death)[3] <- "Male_Deaths"
names(ARI_death)[4] <- "Female_Cases"
names(ARI_death)[5] <- "Female_Deaths"
names(ARI_death)[6] <- "Total_Cases"
names(ARI_death)[7] <- "Total_Deaths"
names(ARI_death)[1] <- "State"
#combining Jammu Kashmir
x <- as.numeric(ARI_death[16,2:7])
y <- as.numeric(ARI_death[15,2:7])
ARI_death[15,] = c("Jammu and Kashmir" , x+y)
ARI_death <- ARI_death[-16,]
ARI_death[5,"State"] = "Bihar"
library(dplyr)
library(rvest)
html <- read_html("https://en.wikipedia.org/wiki/List_of_states_and_union_territories_of_India_by_population")
pop <- html_table(html)
pop <- pop[[2]]
pop <- as.data.frame(pop)
head(pop)
State <- pop[-1,2]
populations <- pop[-1,3]
State[33] = "Dadra and Nagar Haveli"
populations[33] = 343709
State[38] = "Daman and Diu"
populations[38] = 243247
populations <- as.numeric(gsub(",","",populations))
populations[10] <-49577103
State[19] = "Delhi"
State[25] = "Manipur"
state_populations <- data.frame(State, populations)
unique(temp$State)
Deaths_2011 <- merge(ARI_death , state_populations)
Deaths_2011
Deaths_2011["Cases/population"] = Deaths_2011$Total_Cases/Deaths_2011$populations
Deaths_2011
Deaths_2011["Cases/population"] = Deaths_2011$Total_Cases/Deaths_2011$populations
Deaths_2011 <- merge(ARI_death , state_populations)
Deaths_2011["Cases/population"] = Deaths_2011$Total_Cases/Deaths_2011$populations
Deaths_2011["Total Deaths/Cases"] = Deaths_2011$Total_Deaths/Deaths_2011$Total_Cases
Deaths_2011["Male Deaths/Cases"] = Deaths_2011$Male_Deaths/Deaths_2011$Male_Cases
Deaths_2011["Female Deaths/Cases"] = Deaths_2011$Female_Deaths/Deaths_2011$Female_Cases
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[-1,]
ARI_death <- ARI_death[,-8]
names(ARI_death)[2] <- "Male.Cases"
names(ARI_death)[3] <- "Male.Deaths"
names(ARI_death)[4] <- "Female.Cases"
names(ARI_death)[5] <- "Female.Deaths"
names(ARI_death)[6] <- "Total.Cases"
names(ARI_death)[7] <- "Total.Deaths"
names(ARI_death)[1] <- "State"
#combining Jammu Kashmir
x <- as.numeric(ARI_death[16,2:7])
y <- as.numeric(ARI_death[15,2:7])
ARI_death[15,] = c("Jammu and Kashmir" , x+y)
ARI_death <- ARI_death[-16,]
ARI_death[5,"State"] = "Bihar"
library(dplyr)
library(rvest)
html <- read_html("https://en.wikipedia.org/wiki/List_of_states_and_union_territories_of_India_by_population")
pop <- html_table(html)
pop <- pop[[2]]
pop <- as.data.frame(pop)
head(pop)
State <- pop[-1,2]
populations <- pop[-1,3]
State[33] = "Dadra and Nagar Haveli"
populations[33] = 343709
State[38] = "Daman and Diu"
populations[38] = 243247
populations <- as.numeric(gsub(",","",populations))
populations[10] <-49577103
State[19] = "Delhi"
State[25] = "Manipur"
state_populations <- data.frame(State, populations)
unique(temp$State)
Deaths_2011 <- merge(ARI_death , state_populations)
ARI_death
ARI_death$Male.Cases
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[-1,]
ARI_death <- ARI_death[,-8]
names(ARI_death)[2] <- "Male Cases"
names(ARI_death)[3] <- "Male Deaths"
names(ARI_death)[4] <- "Female Cases"
names(ARI_death)[5] <- "Female Deaths"
names(ARI_death)[6] <- "Total Cases"
names(ARI_death)[7] <- "Total Deaths"
names(ARI_death)[1] <- "State"
#combining Jammu Kashmir
x <- as.numeric(ARI_death[16,2:7])
y <- as.numeric(ARI_death[15,2:7])
ARI_death[15,] = c("Jammu and Kashmir" , x+y)
ARI_death <- ARI_death[-16,]
ARI_death[5,"State"] = "Bihar"
library(dplyr)
library(rvest)
html <- read_html("https://en.wikipedia.org/wiki/List_of_states_and_union_territories_of_India_by_population")
pop <- html_table(html)
pop <- pop[[2]]
pop <- as.data.frame(pop)
head(pop)
State <- pop[-1,2]
populations <- pop[-1,3]
State[33] = "Dadra and Nagar Haveli"
populations[33] = 343709
State[38] = "Daman and Diu"
populations[38] = 243247
populations <- as.numeric(gsub(",","",populations))
populations[10] <-49577103
state_populations <- data.frame(State, populations)
unique(temp$State)
states[19] = "Delhi"
states[25] = "Manipur"
Deaths_2011 <- merge(ARI_death , state_populations)
Deaths_2011["Cases/population"] = Deaths_2011$Total.Cases/Deaths_2011$populations
Deaths_2011
ARI_death$`Male Cases`
?sapply
ARI_death[,2:7] <- lapply(ARI_death[,2:7] , as.numeric)
ARI_death$`Male Cases`
library(readxl)
ry(readxl)
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[-1,]
ARI_death <- ARI_death[,-8]
names(ARI_death)[2] <- "Male Cases"
names(ARI_death)[3] <- "Male Deaths"
names(ARI_death)[4] <- "Female Cases"
names(ARI_death)[5] <- "Female Deaths"
names(ARI_death)[6] <- "Total Cases"
names(ARI_death)[7] <- "Total Deaths"
names(ARI_death)[1] <- "State"
#combining Jammu Kashmir
x <- as.numeric(ARI_death[16,2:7])
y <- as.numeric(ARI_death[15,2:7])
ARI_death[15,] = c("Jammu and Kashmir" , x+y)
ARI_death <- ARI_death[-16,]
ARI_death[5,"State"] = "Bihar"
ARI_death[,2:7] <- lapply(ARI_death[,2:7] , as.numeric)
library(dplyr)
library(rvest)
html <- read_html("https://en.wikipedia.org/wiki/List_of_states_and_union_territories_of_India_by_population")
pop <- html_table(html)
pop <- pop[[2]]
pop <- as.data.frame(pop)
head(pop)
State <- pop[-1,2]
populations <- pop[-1,3]
State[33] = "Dadra and Nagar Haveli"
populations[33] = 343709
State[38] = "Daman and Diu"
populations[38] = 243247
populations <- as.numeric(gsub(",","",populations))
populations[10] <-49577103
state_populations <- data.frame(State, populations)
unique(temp$State)
states[19] = "Delhi"
states[25] = "Manipur"
Deaths_2011 <- merge(ARI_death , state_populations)
library(readxl)
library(openxlsx)
# Problem 1
ARI_death=read_excel("no_deaths_2011.xlsx")
World_AQI = read_excel("aap_pm_database_may2014.xls")
ARI_death <- as.data.frame(ARI_death)
ARI_death <- ARI_death[-1,]
ARI_death <- ARI_death[,-8]
names(ARI_death)[2] <- "Male.Cases"
names(ARI_death)[3] <- "Male.Deaths"
names(ARI_death)[4] <- "Female.Cases"
names(ARI_death)[5] <- "Female.Deaths"
names(ARI_death)[6] <- "Total.Cases"
names(ARI_death)[7] <- "Total.Deaths"
names(ARI_death)[1] <- "State"
#combining Jammu Kashmir
x <- as.numeric(ARI_death[16,2:7])
y <- as.numeric(ARI_death[15,2:7])
ARI_death[15,] = c("Jammu and Kashmir" , x+y)
ARI_death <- ARI_death[-16,]
ARI_death[5,"State"] = "Bihar"
ARI_death[,2:7] <- lapply(ARI_death[,2:7] , as.numeric)
library(dplyr)
library(rvest)
html <- read_html("https://en.wikipedia.org/wiki/List_of_states_and_union_territories_of_India_by_population")
pop <- html_table(html)
pop <- pop[[2]]
pop <- as.data.frame(pop)
head(pop)
State <- pop[-1,2]
populations <- pop[-1,3]
State[33] = "Dadra and Nagar Haveli"
populations[33] = 343709
State[38] = "Daman and Diu"
populations[38] = 243247
populations <- as.numeric(gsub(",","",populations))
populations[10] <-49577103
state_populations <- data.frame(State, populations)
unique(temp$State)
states[19] = "Delhi"
states[25] = "Manipur"
Deaths_2011 <- merge(ARI_death , state_populations)
Deaths_2011["Cases/population"] = Deaths_2011$Total.Cases/Deaths_2011$populations
Deaths_2011["Total Deaths/Cases"] = Deaths_2011$Total.Deaths/Deaths_2011$Total.Cases
Deaths_2011["Male Deaths/Cases"] = Deaths_2011$Male.Deaths/Deaths_2011$Male.Cases
Deaths_2011["Female Deaths/Cases"] = Deaths_2011$Female.Deaths/Deaths_2011$Female.Cases
Deaths_2011
write.csv(Deaths_2011 , "Deaths_2011.csv")
write.csv(Deaths_2011 , "Deaths_2011.csv")
write.csv(Deaths_2011 , "Deaths_2011.csv")
library(dplyr)
dplyr)
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
air_qual <- as_tibble(air_quality)
air_qual$PM10_Annual_Average_g_m3 = as.numeric(air_qual$PM10_Annual_Average_g_m3)
#code for state_wise_pollution
air_qualf <- air_qual %>% group_by(State) %>% summarise(SO2_Annual_Average_g_m3 = mean(SO2_Annual_Average_g_m3) ,
NO2_Annual_Average_g_m3 = mean(NO2_Annual_Average_g_m3),
PM10_Annual_Average_g_m3 = mean(PM10_Annual_Average_g_m3 , na.rm = TRUE))
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
#code for quality_vs_ARI
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011.csv")
air
child_2012 <- child_2012[,-1]
Deaths_2011 <- Deaths_2011[,-1]
temp <- as.data.frame(air_qualf)
temp
popultions
populations
Deaths_2011
Deaths_2011 <- merge(ARI_death , state_populations)
Deaths_2011["Cases/population"] = Deaths_2011$Total.Cases/Deaths_2011$populations
Deaths_2011["Total Deaths/Cases"] = Deaths_2011$Total.Deaths/Deaths_2011$Total.Cases
Deaths_2011["Male Deaths/Cases"] = Deaths_2011$Male.Deaths/Deaths_2011$Male.Cases
Deaths_2011["Female Deaths/Cases"] = Deaths_2011$Female.Deaths/Deaths_2011$Female.Cases
Deaths_2011
write.csv(Deaths_2011 , "Deaths_2011.csv")
setwd("~/class-project-group-1")
library(dplyr)
ary(dplyr)
ary(dplyr)
ary(dplyr)
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
air_qual <- as_tibble(air_quality)
air_qual$PM10_Annual_Average_g_m3 = as.numeric(air_qual$PM10_Annual_Average_g_m3)
#code for state_wise_pollution
air_qualf <- air_qual %>% group_by(State) %>% summarise(SO2_Annual_Average_g_m3 = mean(SO2_Annual_Average_g_m3) ,
NO2_Annual_Average_g_m3 = mean(NO2_Annual_Average_g_m3),
PM10_Annual_Average_g_m3 = mean(PM10_Annual_Average_g_m3 , na.rm = TRUE))
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
#code for quality_vs_ARI
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011.csv")
air
child_2012 <- child_2012[,-1]
Deaths_2011 <- Deaths_2011[,-1]
Deaths_2011
temp$SO2_Annual_Average_g_m3
temp$State
Deaths_2011$State
temp$State[6] = "Dadra and Nagar Haveli"
temp$State[7] = "Daman and Diu"
temp$State[13] = "Jammu and Kashmir"
temp$State[22] = "Odisha"
temp$State[26] = "Tamil Nadu"
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
air_qual <- as_tibble(air_quality)
air_qual$PM10_Annual_Average_g_m3 = as.numeric(air_qual$PM10_Annual_Average_g_m3)
#code for state_wise_pollution
air_qualf <- air_qual %>% group_by(State) %>% summarise(SO2_Annual_Average_g_m3 = mean(SO2_Annual_Average_g_m3) ,
NO2_Annual_Average_g_m3 = mean(NO2_Annual_Average_g_m3),
PM10_Annual_Average_g_m3 = mean(PM10_Annual_Average_g_m3 , na.rm = TRUE))
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
#code for quality_vs_ARI
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011.csv")
air
child_2012 <- child_2012[,-1]
Deaths_2011 <- Deaths_2011[,-1]
temp <- as.data.frame(air_qualf)
temp$State[6] = "Dadra and Nagar Haveli"
temp$State[7] = "Daman and Diu"
temp$State[13] = "Jammu and Kashmir"
temp$State[22] = "Odisha"
temp$State[26] = "Tamil Nadu"
comp <- merge (temp , Deaths_2011)
setwd("~/class-project-group-1/Data_Air_Quality")
comp
# comp2 <- merge(comp , Deaths_2011)
write.csv(comp , file = "quality_vs_ARI.csv")
library(shiny)
library(ggplot2)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2012", "child_78" , "statewise_pollution" , "quality_vs_ARI")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot")),
uiOutput("bins_ui")
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_ARI <- read.csv("./Data_Air_Quality/quality_vs_ARI.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_ARI" = quality_vs_ARI)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
output$bins_ui <- renderUI({
if (input$plot_type == "histplot") {
sliderInput("bins", "Number of Bins:", min = 1, max = 50, value = 10)
} else {
NULL
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
else if (input$plot_type == "histplot") {
x_var <- input$x_var
bins <- input$bins # You can adjust the number of bins as needed
ggplot(data, aes_string(x = x_var)) +
geom_histogram(bins = bins, fill = "blue", color = "black") +
labs(title = paste("Histogram for", input$dataset)) +
xlab(x_var) +
ylab("Frequency")
}
}
})
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
setwd("~/class-project-group-1")
library(shiny)
library(ggplot2)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2012", "child_78" , "statewise_pollution" , "quality_vs_ARI")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot")),
uiOutput("bins_ui")
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_ARI <- read.csv("./Data_Air_Quality/quality_vs_ARI.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_ARI" = quality_vs_ARI)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
output$bins_ui <- renderUI({
if (input$plot_type == "histplot") {
sliderInput("bins", "Number of Bins:", min = 1, max = 50, value = 10)
} else {
NULL
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
else if (input$plot_type == "histplot") {
x_var <- input$x_var
bins <- input$bins # You can adjust the number of bins as needed
ggplot(data, aes_string(x = x_var)) +
geom_histogram(bins = bins, fill = "blue", color = "black") +
labs(title = paste("Histogram for", input$dataset)) +
xlab(x_var) +
ylab("Frequency")
}
}
})
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
