cppFunction('NumericVector funcC(NumericVector x){
double sum = 0;
NumericVector y = x;
for(int i = 0 ; i < x.size() ; i++){
y[i] = log(x[i]);
sum = sum + y[i];
}
for(int j = 0 ; j < x.size() ; j++){
y[j] = y[j]/sum;
}
return y;
}
')
vec <- 1:10
all.equal(funcR(vec) , funcC(vec))
library(rbenchmark)
install.packages(rbenchmark)
install.packages("rbenchmark")
library(rbenchmark)
benchmark(func(vec) , funcR(vec) , funcC(vec))
vec <- 1:1e4
all.equal(funcR(vec) , funcC(vec))
benchmark(func(vec) , funcR(vec) , funcC(vec))
vec <- 1:1e6
all.equal(funcR(vec) , funcC(vec))
benchmark(func(vec) , funcR(vec) , funcC(vec))
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
for (i in c(151507:151510,151669:151676)){
if (i %in% c(151507:151510,151673:151676)){
q <- 7
} else {
q <- 5
}
i <- as.character(i)
dlpfc <- getRDS("2020_maynard_prefrontal-cortex", i)
set.seed(101)
dec <- scran::modelGeneVar(dlpfc)
top <- scran::getTopHVGs(dec, n = 2000)
set.seed(102)
dlpfc <- scater::runPCA(dlpfc, subset_row=top)
## Add BayesSpace metadata
dlpfc <- spatialPreprocess(dlpfc, platform="Visium", skip.PCA=TRUE)
# Number of clusters
d <- 15  # Number of PCs
## Run BayesSpace clustering
set.seed(104)
dlpfc <- spatialCluster(dlpfc, q=q, d=d, platform='Visium',
nrep=10000, gamma=3, save.chain=TRUE)
#saving results
path <- paste(i,".csv",sep = "")
path2 <- paste(i , ".jpeg" , sep = "")
write.csv(colData(dlpfc) , file = path)
plot <- clusterPlot(dlpfc, label=labels, palette=NULL, size=0.05) +
scale_fill_viridis_d(option = "A", labels = 1:7) +
labs(title="BayesSpace")
ggsave(filename = path2 , plot , device = "jpeg")
}
setwd("~/class-project-group-1")
# Load the required library
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/33a89527-b545-4389-8738-8d7736aca508?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=100000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
# Initialize empty vectors for each column
state <- character()
city <- character()
type <- character()
category_of_es <- character()
so2_annual_average_g_m3 <- character()
air_quality_of_so2 <- character()
no2_annual_average_g_m3 <- character()
air_quality_of_no2 <- character()
pm10_annual_average_g_m3 <- character()
air_quality_of_pm10 <- character()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
state <- c(state, xmlValue(xmlChildren(item)$state_))
city <- c(city, xmlValue(xmlChildren(item)$city))
type <- c(type, xmlValue(xmlChildren(item)$type))
category_of_es <- c(category_of_es, xmlValue(xmlChildren(item)$category_of_es))
so2_annual_average_g_m3 <- c(so2_annual_average_g_m3, xmlValue(xmlChildren(item)$so2_annual_average_g_m3_))
air_quality_of_so2 <- c(air_quality_of_so2, xmlValue(xmlChildren(item)$air_quality_of_so2))
no2_annual_average_g_m3 <- c(no2_annual_average_g_m3, xmlValue(xmlChildren(item)$no2_annual_average_g_m3_))
air_quality_of_no2 <- c(air_quality_of_no2, xmlValue(xmlChildren(item)$air_quality_of_no2))
pm10_annual_average_g_m3 <- c(pm10_annual_average_g_m3, xmlValue(xmlChildren(item)$pm10_annual_average_g_m3_))
air_quality_of_pm10 <- c(air_quality_of_pm10, xmlValue(xmlChildren(item)$air_quality_of_pm10))
}
# Create a data frame from the vectors
air_quality <- data.frame(
State = state,
City = city,
Type = type,
Category_of_ES = category_of_es,
SO2_Annual_Average_g_m3 = so2_annual_average_g_m3,
Air_Quality_of_SO2 = air_quality_of_so2,
NO2_Annual_Average_g_m3 = no2_annual_average_g_m3,
Air_Quality_of_NO2 = air_quality_of_no2,
PM10_Annual_Average_g_m3 = pm10_annual_average_g_m3,
Air_Quality_of_PM10 = air_quality_of_pm10
)
#Cleaning the data
#dropping categoryofES because of too many NULL values
air_quality <- subset(air_quality, select = -4)
vec <- which(air_quality$Air_Quality_of_SO2 == "Null")
air_quality <- air_quality[-vec,]
air_quality <- air_quality[-c(1:13),]
air_quality\
air_quality
air_quality <- air_quality[ , -c(1)]
air_quality
# Load the required library
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/33a89527-b545-4389-8738-8d7736aca508?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=100000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
# Initialize empty vectors for each column
state <- character()
city <- character()
type <- character()
category_of_es <- character()
so2_annual_average_g_m3 <- character()
air_quality_of_so2 <- character()
no2_annual_average_g_m3 <- character()
air_quality_of_no2 <- character()
pm10_annual_average_g_m3 <- character()
air_quality_of_pm10 <- character()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
state <- c(state, xmlValue(xmlChildren(item)$state_))
city <- c(city, xmlValue(xmlChildren(item)$city))
type <- c(type, xmlValue(xmlChildren(item)$type))
category_of_es <- c(category_of_es, xmlValue(xmlChildren(item)$category_of_es))
so2_annual_average_g_m3 <- c(so2_annual_average_g_m3, xmlValue(xmlChildren(item)$so2_annual_average_g_m3_))
air_quality_of_so2 <- c(air_quality_of_so2, xmlValue(xmlChildren(item)$air_quality_of_so2))
no2_annual_average_g_m3 <- c(no2_annual_average_g_m3, xmlValue(xmlChildren(item)$no2_annual_average_g_m3_))
air_quality_of_no2 <- c(air_quality_of_no2, xmlValue(xmlChildren(item)$air_quality_of_no2))
pm10_annual_average_g_m3 <- c(pm10_annual_average_g_m3, xmlValue(xmlChildren(item)$pm10_annual_average_g_m3_))
air_quality_of_pm10 <- c(air_quality_of_pm10, xmlValue(xmlChildren(item)$air_quality_of_pm10))
}
# Create a data frame from the vectors
air_quality <- data.frame(
State = state,
City = city,
Type = type,
Category_of_ES = category_of_es,
SO2_Annual_Average_g_m3 = so2_annual_average_g_m3,
Air_Quality_of_SO2 = air_quality_of_so2,
NO2_Annual_Average_g_m3 = no2_annual_average_g_m3,
Air_Quality_of_NO2 = air_quality_of_no2,
PM10_Annual_Average_g_m3 = pm10_annual_average_g_m3,
Air_Quality_of_PM10 = air_quality_of_pm10
)
#Cleaning the data
#dropping categoryofES because of too many NULL values
air_quality <- subset(air_quality, select = -4)
vec <- which(air_quality$Air_Quality_of_SO2 == "Null")
air_quality <- air_quality[-vec,]
air_quality <- air_quality[-c(1:13),]
air_quality <- air_quality[ , -c(1)]
library(XML)
library(tidyverse)
library(dplyr)
# Define the URL for the GET request
url <- 'https://api.data.gov.in/resource/33a89527-b545-4389-8738-8d7736aca508?api-key=579b464db66ec23bdd0000015115b9e83ec44fb969475c8cdea3f9be&format=xml&limit=100000'
# Send a GET request and extract XML content as a character string
response <- httr::GET(url)
xml_content <- httr::content(response, "text", encoding = "UTF-8")
# Parse the XML content
xml_content <- xmlParse(xml_content, useInternalNodes = TRUE)
# Extract specific nodes from the XML
items <- getNodeSet(xml_content, "//item")
# Initialize empty vectors for each column
state <- character()
city <- character()
type <- character()
category_of_es <- character()
so2_annual_average_g_m3 <- character()
air_quality_of_so2 <- character()
no2_annual_average_g_m3 <- character()
air_quality_of_no2 <- character()
pm10_annual_average_g_m3 <- character()
air_quality_of_pm10 <- character()
# Loop through the extracted nodes and populate the vectors
for (item in items) {
state <- c(state, xmlValue(xmlChildren(item)$state_))
city <- c(city, xmlValue(xmlChildren(item)$city))
type <- c(type, xmlValue(xmlChildren(item)$type))
category_of_es <- c(category_of_es, xmlValue(xmlChildren(item)$category_of_es))
so2_annual_average_g_m3 <- c(so2_annual_average_g_m3, xmlValue(xmlChildren(item)$so2_annual_average_g_m3_))
air_quality_of_so2 <- c(air_quality_of_so2, xmlValue(xmlChildren(item)$air_quality_of_so2))
no2_annual_average_g_m3 <- c(no2_annual_average_g_m3, xmlValue(xmlChildren(item)$no2_annual_average_g_m3_))
air_quality_of_no2 <- c(air_quality_of_no2, xmlValue(xmlChildren(item)$air_quality_of_no2))
pm10_annual_average_g_m3 <- c(pm10_annual_average_g_m3, xmlValue(xmlChildren(item)$pm10_annual_average_g_m3_))
air_quality_of_pm10 <- c(air_quality_of_pm10, xmlValue(xmlChildren(item)$air_quality_of_pm10))
}
# Create a data frame from the vectors
air_quality <- data.frame(
State = state,
City = city,
Type = type,
Category_of_ES = category_of_es,
SO2_Annual_Average_g_m3 = so2_annual_average_g_m3,
Air_Quality_of_SO2 = air_quality_of_so2,
NO2_Annual_Average_g_m3 = no2_annual_average_g_m3,
Air_Quality_of_NO2 = air_quality_of_no2,
PM10_Annual_Average_g_m3 = pm10_annual_average_g_m3,
Air_Quality_of_PM10 = air_quality_of_pm10
)
#Cleaning the data
#dropping categoryofES because of too many NULL values
air_quality <- subset(air_quality, select = -4)
vec <- which(air_quality$Air_Quality_of_SO2 == "Null")
air_quality <- air_quality[-vec,]
air_quality <- air_quality[-c(1:13),]
air_quality
air_quality[1,1]
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
table(air_quality$Type)
air_qual <- as_tibble(air_quality)
air_qual$PM10_Annual_Average_g_m3 = as.numeric(air_qual$PM10_Annual_Average_g_m3)
air_qualf <- air_qual %>% group_by(State) %>% summarise(SO2_Annual_Average_g_m3 = mean(SO2_Annual_Average_g_m3) ,
NO2_Annual_Average_g_m3 = mean(NO2_Annual_Average_g_m3),
PM10_Annual_Average_g_m3 = mean(PM10_Annual_Average_g_m3 , na.rm = TRUE))
#visualizing pollution data
plot(air_qualf$SO2_Annual_Average_g_m3, air_qualf$NO2_Annual_Average_g_m3 , xlab = "SO2 annual average in g/m^3"
,ylab = "NO2 annual average in g/m^2" , main = "statewise NO2 vs SO2")
plot(air_qualf$SO2_Annual_Average_g_m3, air_qualf$PM10_Annual_Average_g_m3 , xlab = "SO2 annual average in g/m^3"
,ylab = "PM10 annual average in g/m^2" , main = "statewise PM10 vs SO2")
plot(air_qualf$NO2_Annual_Average_g_m3, air_qualf$PM10_Annual_Average_g_m3 , xlab = "NO2 annual average in g/m^3"
,ylab = "PM10 annual average in g/m^2" , main = "statewise PM10 vs NO2")
#correlation between indicators
plot(air_qual$SO2_Annual_Average_g_m3,air_qual$NO2_Annual_Average_g_m3)
plot(air_qual$SO2_Annual_Average_g_m3,air_qual$PM10_Annual_Average_g_m3)
plot(air_qual$NO2_Annual_Average_g_m3,air_qual$PM10_Annual_Average_g_m3)
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_2012[child_2012$State %in% air_qualf$State ,]
#visualizing RI data
plot(child_2012$Total_Children_Acute_Respiratory_Infection , child_2012$Total_Women_Aware_Danger_Signs_ARI)
plot(child_2012$Rural_Children_Acute_Respiratory_Infection , child_2012$Rural_Women_Aware_Danger_Signs_ARI)
plot(child_2012$Urban_Children_Acute_Respiratory_Infection , child_2012$Urban_Women_Aware_Danger_Signs_ARI)
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
child_78[child_78$State %in% child_78$State ,]
#visualizing RI data
plot(child_2012$Total_Children_Acute_Respiratory_Infection , child_2012$Total_Women_Aware_Danger_Signs_ARI)
plot(child_2012$Rural_Children_Acute_Respiratory_Infection , child_2012$Rural_Women_Aware_Danger_Signs_ARI)
plot(child_2012$Urban_Children_Acute_Respiratory_Infection , child_2012$Urban_Women_Aware_Danger_Signs_ARI)
child_2012$wState
air_qualf$State
#comparisons
Deaths_2011 <- read.csv("./Data_Respiratory_illnesses/Deaths_2011.csv")
air_qualf
child_2012
child_2012[,-1]
child_2012 <- child_2012[,-1]
temp <- as.data.frame(air_qualf)
comp <- merge (temp , child_2012)
comp
Deaths_2011
Deaths_2011 <- Deaths_2011[,-1]
comp2 <- merge(temp , Deaths_2011)
comp2
write.csv(comp2 , file = "quality_vs_ARI.csv")
setwd("~/class-project-group-1/Data_Air_Quality")
write.csv(comp2 , file = "quality_vs_ARI.csv")
setwd("~/class-project-group-1")
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_ARI")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_deaths <- read.csv("./Data_Air_Quality/quality_vs_ARI.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_ARI" = quality_vs_ARI)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_ARI")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_ARI <- read.csv("./Data_Air_Quality/quality_vs_ARI.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_ARI" = quality_vs_ARI)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
comp2 <- merge(comp , Deaths_2011)
comp2
write.csv(comp2 , file = "quality_vs_ARI.csv")
setwd("~/class-project-group-1/Data_Air_Quality")
write.csv(comp2 , file = "quality_vs_ARI.csv")
setwd("~/class-project-group-1")
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Air Quality and Respiratory Illnesses"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select a dataset:", c("air_quality", "child_2912", "child_78" , "statewise_pollution" , "quality_vs_ARI")),
selectInput("x_var", "Select X variable:", ""),
selectInput("y_var", "Select Y variable:", ""),
selectInput("row_start" , "start row :" , ""),
selectInput("row_end" , "end row :" , ""),
# Add input fields for barplot
selectInput("plot_type" , "Select plot type" , c("scatterplot" , "barplot" , "histplot"))
),
mainPanel(
tableOutput("data"),
actionButton("plot_button","generate plot"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
# Sample data for demonstration
# Replace this with your own datasets
air_quality <- read.csv("./Data_Air_Quality/air_quality.csv")
child_2012 <- read.csv("./Data_Respiratory_illnesses/child_2012.csv")
child_78 <- read.csv("./Data_Respiratory_illnesses/child_78.csv")
statewise_pollution <- read.csv("./Data_Air_Quality/statewise_pollution.csv")
quality_vs_ARI <- read.csv("./Data_Air_Quality/quality_vs_ARI.csv")
datasets <- list("air_quality" = air_quality, "child_2012" = child_2012, "child_78" = child_78 ,
"statewise_pollution" = statewise_pollution , "quality_vs_ARI" = quality_vs_ARI)
# Show data summary
output$data <- renderTable({
if (!is.null(input$dataset)) {
datasets[[input$dataset]][input$row_start:input$row_end , c(input$x_var , input$y_var)]
}
})
# Create scatterplot
output$plot <- renderPlot({
if (!is.null(input$dataset) && input$plot_button > 0) {
data <- datasets[[input$dataset]]
if(input$plot_type == "scatterplot"){
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var] )) +
geom_point() +
labs(title = paste("Scatterplot for", input$dataset)) +
xlab(input$x_var) +
ylab(input$y_var)
}
else if(input$plot_type == "barplot"){
data <- datasets[[input$dataset]]
x_var <- input$barplot_x_var
y_var <- input$barplot_y_var
# Create the barplot
ggplot(data, aes(x = data[, input$x_var], y = data[, input$y_var])) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = paste("Barplot for", input$dataset)) +
xlab(x_var) +
ylab(y_var)
}
}
})
# Create barplot
# Update variable choices based on selected dataset
observe({
if (!is.null(input$dataset)) {
updateSelectInput(session = getDefaultReactiveDomain(), "x_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain(), "y_var", choices = names(datasets[[input$dataset]]))
updateSelectInput(session = getDefaultReactiveDomain() , "row_start" , choices = 1:dim(datasets[[input$dataset]])[1])
updateSelectInput(session = getDefaultReactiveDomain() , "row_end" , choices = 1:dim(datasets[[input$dataset]])[1])
}
})
}
shinyApp(ui, server)
